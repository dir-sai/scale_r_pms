// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(TENANT)
  accounts      Account[]
  sessions      Session[]

  // Property management relations
  properties    Property[]    @relation("PropertyOwner")
  tenancies     Tenancy[]     @relation("TenantUser")
  payments      Payment[]     @relation("PaymentUser")
  maintenance   MaintenanceRequest[] @relation("MaintenanceUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  LANDLORD
  TENANT
}

model Property {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("PropertyOwner", fields: [ownerId], references: [id])
  units       Unit[]
  maintenance MaintenanceRequest[]
  payments    Payment[]
}

model Unit {
  id          String   @id @default(cuid())
  number      String
  type        String
  size        Float
  rent        Float
  status      UnitStatus @default(VACANT)
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  tenancies   Tenancy[]
  maintenance MaintenanceRequest[]
  payments    Payment[]
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
}

model Tenancy {
  id         String   @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  deposit    Float
  status     TenancyStatus @default(ACTIVE)
  userId     String
  unitId     String
  user       User     @relation("TenantUser", fields: [userId], references: [id])
  unit       Unit     @relation(fields: [unitId], references: [id])
  payments   Payment[]
}

enum TenancyStatus {
  ACTIVE
  ENDED
  TERMINATED
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  date        DateTime
  type        PaymentType
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  propertyId  String
  unitId      String
  userId      String
  tenancyId   String
  property    Property @relation(fields: [propertyId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])
  user        User     @relation("PaymentUser", fields: [userId], references: [id])
  tenancy     Tenancy  @relation(fields: [tenancyId], references: [id])
}

enum PaymentType {
  RENT
  DEPOSIT
  MAINTENANCE
  OTHER
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_MONEY
  CARD
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model MaintenanceRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime @default(now())
  status      MaintenanceStatus @default(PENDING)
  priority    MaintenancePriority
  propertyId  String
  unitId      String
  userId      String
  property    Property @relation(fields: [propertyId], references: [id])
  unit        Unit     @relation(fields: [unitId], references: [id])
  user        User     @relation("MaintenanceUser", fields: [userId], references: [id])
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
} 